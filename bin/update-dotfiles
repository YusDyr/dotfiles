#!/usr/bin/env python

import base64
import difflib
import hashlib
import imp
import json
import os
import platform
import shutil
import sys
import tempfile
import urllib2

imp.load_source('aes', './aes')

api_url = 'https://api.github.com/repos/jpverkamp/dotfiles/git/trees/master?recursive=1'
api_in = urllib2.urlopen(api_url)
api = json.loads(api_in.read())
api_in.close()

extensions = []

if platform.system() == 'Linux':
    extensions.append('.linux')
elif platform.system() == 'Darwin':
    extensions.append('.mac')
elif platform.system() == 'Windows':
    extensions.append('.windows')

if '--env' in sys.argv:
    index = sys.argv.find('--env')
    extensions.append('.' + sys.argv[index + 1])
    del sys.argv[index]

# ----- https://gist.github.com/msabramo/763200 -----

from sys import argv
from hashlib import sha1
from cStringIO import StringIO

class githash(object):
    def __init__(self):
        self.buf = StringIO()

    def update(self, data):
        self.buf.write(data)

    def hexdigest(self):
        data = self.buf.getvalue()
        h = sha1()
        h.update("blob %u\0" % len(data))
        h.update(data)

        return h.hexdigest()

def githash_data(data):
    h = githash()
    h.update(data)
    return h.hexdigest()

def githash_fileobj(fileobj):
    return githash_data(fileobj.read())

# ----- / https://gist.github.com/msabramo/763200 ----

def decode_file(js):
    if remote_js['encoding'] == 'base64':
        return base64.b64decode(remote_js['content']).replace('\r\n', '\n')
    else:
        print('Cannot diff, unknown content type: ' + remote_js['encoding'])
        sys.exit(0)


for file in api['tree']:
    path = os.path.expanduser('~/.' + file['path'])

    # Skip double dots, those are things like gitignore
    if '..' in path or 'README.md' in path or 'install.py' in path:
        continue

    # Skip local directories that already exist
    if os.path.exists(path) and os.path.isdir(path):
        continue

    # Calculate current file hashes; we generate three to deal with cross platform line endings
    current_hashes = []
    if os.path.exists(path) and os.path.isfile(path):
        with open(path, 'r') as fin:
            content = fin.read()
            current_hashes.append(githash_data(content))
            current_hashes.append(githash_data(content.replace('\r\n', '\n')))
            current_hashes.append(githash_data(content.replace('\n', '\r\n')))

    # If we don't have the most up to date file, ask the user what to do
    if not file['sha'] in current_hashes:
        while True:
            choice = raw_input('{0} needs an update, download? '.format(path))

            # Download the current file
            if choice == 'y':
                file_in = urllib2.urlopen(file['url'])
                remote_js = json.loads(file_in.read())
                remote_content = decode_file(remote_js)
                file_in.close()

                with open(path, 'wb') as file_out:
                    file_out.write(remote_content)

                # If the file is encrypted, decrypt it
                if file_out.endswith('.aes'):
                    print('-- Decrypting'.format(extension = extension))
                    aes.decrypt(file_out)
                    shutil.copymode(file_out, file_out[:-4])

                # If the file specifies the current os or env, copy it
                for extension in extensions:
                    if extension and file_out.endswith(extension):
                        print('-- Copying {extension}'.format(extension = extension))
                        file_out_local = file_out[:-1 * len(extension)]
                        shutil.copy(file_out, file_out_local)
                        shutil.copymode(file_out, file_out_local)

            # Skip the current file
            elif choice == 'n':
                break

            # Display a diff
            elif choice == 'd':

                if os.path.exists(path) and os.path.isfile(path):
                    file_in = urllib2.urlopen(file['url'])
                    remote_js = json.loads(file_in.read())
                    if remote_js['encoding'] == 'base64':
                        remote_content = decode_file(remote_js).split('\n')
                    else:
                        print('Cannot diff, unknown content type: ' + remote_js['encoding'])
                        sys.exit(0)
                    file_in.close()

                    with open(path, 'r') as file_in:
                        local_content = file_in.read().replace('\r\n', '\n').split('\n')

                    for line in difflib.context_diff(local_content, remote_content):
                        print(line)

                elif os.path.isdir(path):
                    print('{0} is a directory'.format(path))
                else:
                    print('{0} is new'.format(path))

            # Quit
            elif choice == 'q':
                sys.exit(0)

            # Display options by default
            else:
                print('y = download, n = skip, d = show diff; h = show help')

        pass
    else:
        print('{0} matches, skipping'.format(path))

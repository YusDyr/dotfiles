#!/usr/bin/env python3

import argparse
import boto3
import datetime
import difflib
import pprint

try:
    import jq
except:
    print('Requires jq (for filtering output): pip3 install jq')
    sys.exit(0)

known_fields = [
    'ami_launch_index', 'architecture', 'block_device_mappings', 'client_token',
    'ebs_optimized', 'ena_support', 'hypervisor', 'iam_instance_profile', 'id',
    'image_id', 'instance_id', 'instance_lifecycle', 'instance_type',
    'kernel_id', 'key_name', 'launch_time', 'monitoring',
    'network_interfaces_attribute', 'placement', 'platform', 'private_dns_name',
    'private_ip_address', 'product_codes', 'public_dns_name',
    'public_ip_address', 'ramdisk_id', 'root_device_name', 'root_device_type',
    'security_groups', 'source_dest_check', 'spot_instance_request_id',
    'sriov_net_support', 'state', 'state_reason', 'state_transition_reason',
    'subnet_id', 'tags', 'virtualization_type', 'vpc_id'
]

# Command line argument processing (this library is nice)
parser = argparse.ArgumentParser(description = 'Find out information about EC2 instances')

parser.add_argument('--profile', default = None, help = 'The AWS profile to use to connect (if not specified, will use default)')
parser.add_argument('--region', default = 'us-west-2', help = 'The AWS region to search')
parser.add_argument('--matches', default = 0, type = int, help = 'The maximum number of matches to return, default (0) is all')
parser.add_argument('--exact', default = 'store_true', help = 'Return only exact name matches (rather than any inclusive)')
parser.add_argument('--pretty', action = 'store_true', help = 'Pretty print results (rather than compact print)')

arg_group = parser.add_mutually_exclusive_group()
arg_group.add_argument('--filter', default = '.', help = 'A jq style filter to apply to the output')
arg_group.add_argument('--ip', action = 'store_true', help = 'Alias for --matches 1 --output .private_ip_address')
arg_group.add_argument('--ips', action = 'store_true', help = 'Alias for --output .private_ip_address')
arg_group.add_argument('--list', action = 'store_true', help = 'Alias for --output [.instance_id, .private_ip_address, (.tags[] | select(.Key == "Name") | .Value)]')

parser.add_argument('query', type = str, help = 'Query to apply to the Name tag')

args = parser.parse_args()

# Apply aliases
if args.ip or args.ips:
    args.filter = '.private_ip_address'
    if args.ip:
        args.matches = 1

elif args.list:
    args.filter = '[.instance_id, .private_ip_address, (.tags[] | select(.Key == "Name") | .Value)]'

# Find the instances, get matches weighted by how well they match
def instance_name(instance):
    for tag in instance.tags:
        if tag['Key'].lower() == 'name':
            return tag['Value']
    return tag.instance_id

if args.profile:
    session = boto3.session.Session(profile_name = args.profile)
    ec2 = session.resource('ec2', region_name = args.region)
else:
    ec2 = boto3.resource('ec2', region_name = args.region)

filters = [
    {'Name': 'tag:Name', 'Values': [f'*{args.query}*' if args.exact else args.query]},
    {'Name': 'instance-state-name', 'Values': ['running']},
]

instances = list(sorted(
    ec2.instances.filter(Filters = filters),
    key = lambda instance: -difflib.SequenceMatcher(None, args.query, instance_name(instance)).ratio()
))

if args.matches > 0:
    instances = instances[:args.matches]

# Print out the requested values using pyjq for filtering
def replace_datetime(obj):
    if isinstance(obj, list):
        return [replace_datetime(el) for el in obj]
    elif isinstance(obj, dict):
        return {k: replace_datetime(v) for k, v in obj.items()}
    elif isinstance(obj, datetime.datetime):
        return str(obj)
    else:
        return obj

jq_filter = jq.jq(args.filter)
print_f = pprint.pprint if args.pretty else print

for instance in instances:
    json = {field: replace_datetime(getattr(instance, field)) for field in known_fields}
    print_f(jq_filter.transform(json))
